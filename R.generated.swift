//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 9 colors.
  struct color {
    /// Color `assembly`.
    static let assembly = Rswift.ColorResource(bundle: R.hostingBundle, name: "assembly")
    /// Color `c`.
    static let c = Rswift.ColorResource(bundle: R.hostingBundle, name: "c")
    /// Color `default`.
    static let `default` = Rswift.ColorResource(bundle: R.hostingBundle, name: "default")
    /// Color `html`.
    static let html = Rswift.ColorResource(bundle: R.hostingBundle, name: "html")
    /// Color `javaScript`.
    static let javaScript = Rswift.ColorResource(bundle: R.hostingBundle, name: "javaScript")
    /// Color `java`.
    static let java = Rswift.ColorResource(bundle: R.hostingBundle, name: "java")
    /// Color `objectiveC`.
    static let objectiveC = Rswift.ColorResource(bundle: R.hostingBundle, name: "objectiveC")
    /// Color `python`.
    static let python = Rswift.ColorResource(bundle: R.hostingBundle, name: "python")
    /// Color `swift`.
    static let swift = Rswift.ColorResource(bundle: R.hostingBundle, name: "swift")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "assembly", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func assembly(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.assembly, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "c", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func c(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.c, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "default", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func `default`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.`default`, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "html", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func html(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.html, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "java", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func java(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.java, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "javaScript", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func javaScript(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.javaScript, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "objectiveC", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func objectiveC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.objectiveC, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "python", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func python(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.python, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "swift", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func swift(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.swift, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "assembly", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func assembly(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.assembly.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "c", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func c(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.c.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "default", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func `default`(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.`default`.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "html", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func html(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.html.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "java", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func java(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.java.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "javaScript", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func javaScript(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.javaScript.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "objectiveC", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func objectiveC(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.objectiveC.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "python", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func python(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.python.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "swift", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func swift(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.swift.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `repositories.json`.
    static let repositoriesJson = Rswift.FileResource(bundle: R.hostingBundle, name: "repositories", pathExtension: "json")

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "repositories", withExtension: "json")`
    static func repositoriesJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.repositoriesJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 4 images.
  struct image {
    /// Image `access`.
    static let access = Rswift.ImageResource(bundle: R.hostingBundle, name: "access")
    /// Image `default`.
    static let `default` = Rswift.ImageResource(bundle: R.hostingBundle, name: "default")
    /// Image `free`.
    static let free = Rswift.ImageResource(bundle: R.hostingBundle, name: "free")
    /// Image `tap`.
    static let tap = Rswift.ImageResource(bundle: R.hostingBundle, name: "tap")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "access", bundle: ..., traitCollection: ...)`
    static func access(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.access, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "default", bundle: ..., traitCollection: ...)`
    static func `default`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.`default`, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "free", bundle: ..., traitCollection: ...)`
    static func free(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.free, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tap", bundle: ..., traitCollection: ...)`
    static func tap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tap, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `CommitCell`.
    static let commitCell = _R.nib._CommitCell()
    /// Nib `RepositoryCell`.
    static let repositoryCell = _R.nib._RepositoryCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CommitCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commitCell) instead")
    static func commitCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commitCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RepositoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.repositoryCell) instead")
    static func repositoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.repositoryCell)
    }
    #endif

    static func commitCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommitCell? {
      return R.nib.commitCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommitCell
    }

    static func repositoryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RepositoryCell? {
      return R.nib.repositoryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RepositoryCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CommitCell`.
    static let commitCell: Rswift.ReuseIdentifier<CommitCell> = Rswift.ReuseIdentifier(identifier: "CommitCell")
    /// Reuse identifier `RepositoryCell`.
    static let repositoryCell: Rswift.ReuseIdentifier<RepositoryCell> = Rswift.ReuseIdentifier(identifier: "RepositoryCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _CommitCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CommitCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommitCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommitCell
      }

      fileprivate init() {}
    }

    struct _RepositoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RepositoryCell

      let bundle = R.hostingBundle
      let identifier = "RepositoryCell"
      let name = "RepositoryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RepositoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RepositoryCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let codeViewController = StoryboardViewControllerResource<CodeViewController>(identifier: "CodeViewController")
      let descriptionViewController = StoryboardViewControllerResource<DescriptionViewController>(identifier: "DescriptionViewController")
      let languageViewController = StoryboardViewControllerResource<LanguageViewController>(identifier: "LanguageViewController")
      let listViewController = StoryboardViewControllerResource<ListViewController>(identifier: "ListViewController")
      let mainViewController = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewController")
      let name = "Main"

      func codeViewController(_: Void = ()) -> CodeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: codeViewController)
      }

      func descriptionViewController(_: Void = ()) -> DescriptionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: descriptionViewController)
      }

      func languageViewController(_: Void = ()) -> LanguageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: languageViewController)
      }

      func listViewController(_: Void = ()) -> ListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: listViewController)
      }

      func mainViewController(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "tap", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tap' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().codeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'codeViewController' could not be loaded from storyboard 'Main' as 'CodeViewController'.") }
        if _R.storyboard.main().descriptionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'descriptionViewController' could not be loaded from storyboard 'Main' as 'DescriptionViewController'.") }
        if _R.storyboard.main().languageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'languageViewController' could not be loaded from storyboard 'Main' as 'LanguageViewController'.") }
        if _R.storyboard.main().listViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'listViewController' could not be loaded from storyboard 'Main' as 'ListViewController'.") }
        if _R.storyboard.main().mainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
